/**
	Relational Algebra Simulator
	author: David Nagy (mrnagydavid)
	
	version: 1.0
	
	@license MIT
*/
"use strict";
var __RELALG_COMMANDMANAGER = true;

/**
 *	This class is reponsible for executing the commands of the query tree in the proper order.
 *	Every query tree vertex represents a specific relational algebraic operation represented by the various Operation classes.
 *	This class traverses the branches and builds a list of these operations to be executed at a later time by a call to its public 'execute' method.
 *	The QueryManager creates the CommandManager with the current QueryTreeRelation as an argument. 
 *	The CommandManager apart from creating the commandlist can be made capable of applying different optimization strategies.
 *
 *	The constructor itself automatically builds a command list by traversing the query tree. See {@link CommandManager#buildCmdList}.
 *	@param {QueryTreeRelation} querytreerelation A qtr object is a tree or subtree of commands built by the parser.
 *	@constructor
 */
function CommandManager(querytreerelation) {
	var that = this;
	
	/**
	 *	An array of Operations. 
	 *	@var {Operation[]} cmdlist
	 */
	var cmdlist = [];
	buildCmdList(querytreerelation);
	
	/**
	 *	Recursive private method to traverse the query tree in a depth-first post-order fashion.
	 *	Subsequently fills up the command list with the proper Operation instances.
	 *	@param {QueryTreeRelation} qtr
	 */
	function buildCmdList(qtr) {
		if (qtr.source.cmd === "COPY") {
			cmdlist.push(getOperation(qtr));
		} else {
			if (qtr.source.relations !== undefined) {
				buildCmdList(qtr.source.relations[0]);
				buildCmdList(qtr.source.relations[1]);
			} else if (qtr.source.relation !== undefined) {
				buildCmdList(qtr.source.relation);
			} else {
				throw new RASQueryTreeError();
			}
			cmdlist.push(getOperation(qtr));
		}
		return true;
	}
	
	/**
	 *	Returns a shallow copy of the command list generated by the QueryTreeRelation received by the constructor.
	 *	@returns {Operation[]}
	 */
	this.getCommandList = function() {
		return cmdlist.slice(0);
	}
	
	/**
	 *	Executes every Operation in the command list one-by-one.
	 *	@return {String} Name of the final, resulting relation.  
	 */
	this.execute = function() {
		var i;
		var result;
		
		for (i in cmdlist) {
			result = cmdlist[i].execute();
		}
		
		return result;
	}
}
